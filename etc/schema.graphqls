type Query {
    simiproducts (
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductAttributeFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        simiFilter: String @doc(description: "Simiconnector filter."),
        simiNoFilter: Boolean = false @doc(description: "Ignore Filter Process for faster API."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
        sort: ProductAttributeSortInput @doc(description: "Specifies which attribute to sort on, and whether to return the results in ascending or descending order."),
        simiProductSort: SimiProductSort @doc(description: "SimiProductSort.")
    ): Simiproducts
    @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Simiproducts") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes") @cache(cacheIdentity: "Magento\\CatalogGraphQl\\Model\\Resolver\\Product\\Identity")
    simiStoreConfig(
        storeId: Int @doc(description: "Change store view id"),
        currency: String @doc(description: "Change currency")
    ): SimiStoreConfig @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Simistoreconfigresolver") @doc(description: "The store config query")
    simiStoreGroup : [ SimiStoreGroupData ] @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Simigroupresolver") @doc(description: "Manually return Store Group Data before magento provide")
    simiRootCate : CategoryTree @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\SimiRootCate") @doc(description: "Extra field to product details") @cache(cacheIdentity: "Magento\\CatalogGraphQl\\Model\\Resolver\\Category\\CategoryTreeIdentity")
    customerOrder(order_number: String!): CustomerOrder @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\CustomerOrderDetailsResolver") @doc(description: "Get customer order details by order_number")
	customerOrders: CustomerOrders @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Orders") @doc(description: "List of customer orders") @cache(cacheable: false)
	simiBanner: [SimiBanner] @doc(description: "return the information of the banner which match the current store view") @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Theme\\Banner")
    simiCategories: [SimiCategory] @doc(description: "return the information of a list of home categories") @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Theme\\SimiCategory")
    simiProductlist: [SimiProductList] @doc(description: "return the information of a list of productList") @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Theme\\ProductList")
    simiCmspage: [SimiCMSpage] @doc(description: "return the information of the simi CMS") @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Theme\\SimiCMSpage")
    simiCheckUserIsAuthed (cart_id: String): SimiUserIsAuthed @resolver(class:"\\Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Cart\\SimiUserIsAuthed") @cache(cacheable: false)
}

type Mutation {
    subscribe(email: String!): Subscribe @resolver(class: "\\Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Subscribe") @doc(description: "Subscribe email to magento subscribed list for guest.")
    wishlist(product: Int!, data: String): Wishlist @resolver(class: "\\Simi\\SimiconnectorGraphQl\\Model\\Resolver\\WishlistResolver") @doc(description: "Add wishlist item to customer's wishlist.")
    wishlistToCart(item_id: Int!, cart_id: String!): WishlistCart @resolver(class: "\\Simi\\SimiconnectorGraphQl\\Model\\Resolver\\WishlistToCartResolver") @doc(description: "Add wishlist item to cart.")
    wishlistRemoveItem(item_id: Int!): Wishlist @resolver(class: "\\Simi\\SimiconnectorGraphQl\\Model\\Resolver\\WishlistRemoveItemResolver") @doc(description: "Remove wishlist item from customer's wishlist.")
	contactusFormSubmit(input: ContactusInput!): ContactusOutput @resolver(class: "\\Simi\\SimiconnectorGraphQl\\Model\\Resolver\\ContactUsResolver") @doc(description:"Contact us form")
}

type Simiproducts @doc(description: "The Products object is the top-level object returned in a product search") {
    items: [ProductInterface] @doc(description: "An array of products that match the specified search criteria")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query")
    total_count: Int @doc(description: "The number of products returned")
    filters: [LayerFilter] @resolver(class: "Magento\\CatalogGraphQl\\Model\\Resolver\\LayerFilters") @doc(description: "Layered navigation filters array")
    sort_fields: SortFields @doc(description: "An object that includes the default sort field and all available sort fields") @resolver(class: "Magento\\CatalogGraphQl\\Model\\Resolver\\Category\\SortFields")
    simi_filters: [SimiLayerFilter] @doc(description: "Simi Filter options")
    maxPrice: Float @doc(description: "Max price Before filtering")
    minPrice: Float @doc(description: "Min price Before filtering")
}

interface ProductInterface {
    simiExtraField: String @doc(description: "Simicart Product Extra Fields")
}

interface CategoryInterface {
    simiCategoryCms: SimiCategoryCms  @doc(description: "Get Cms Config For Category") @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\SimiCategoryCms")
    simi_cat_image: String @doc(description: "Cate Image to Avoid exception")   @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Category\\SimiCateImage")
}

type AvailablePaymentMethod {
    simi_payment_content : String @doc(description: "Payment content for extra data") @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\PaymentContent")
}

type SimiLayerFilter {
    name: String @doc(description: "Layered navigation filter name")
    request_var: String @doc(description: "Request variable name for filter query")
    filter_items_count: Int @doc(description: "Count of filter items in filter group")
    filter_items: [SimiLayerFilterItem] @doc(description: "Array of filter items")
}

type SimiLayerFilterItem {
    label: String @doc(description: "Filter label")
    value_string: String @doc(description: "Value for filter request variable to be used in query")
    items_count: Int @doc(description: "Count of items by filter")
}

type SimiCategoryCms {
    display_mode: String @doc(description: "Category Display Mode")
    cms_identifier: String @doc(description: "Cms block identifier")
    cms: String @doc(description: "Cms block")
}

type Subscribe {
    status: String
    message: String
}

input SimiProductSort @doc(description:"Input SimiProductSort") {
    attribute: String
    direction: String
}


type SimiStoreConfig {
    store_id: String @doc(description: "Current store Id")
    currency: String @doc(description: "Current currency")
    pwa_studio_client_ver_number: String @doc(description: "Client PWA Studio version number")
    root_category_id: Int @doc(description: "Root Category Id of storeview")
    config : SimiStoreConfigDetails @doc(description: "Store config Details")
}

type SimiStoreGroupData {
    group_id : String
    website_id : String
    name : String
    root_category_id : String
    default_store_id : String
    code : String
    storeviews : [ SimiGroupDataStoreView ]
}

type SimiGroupDataStoreView {
    store_id : String
    code : String
    name : String
    sort_order : String
    is_active : String
}

type SimiStoreConfigDetails {
    base : SimiStoreConfigDetailsBase @doc(description: "Store config Details Base")
    sales : SimiStoreConfigDetailsSales @doc(description: "Store config Details Sales")
    checkout : SimiStoreConfigDetailsCheckout @doc(description: "Store config Details Checkout")
    tax : SimiStoreConfigDetailsTax @doc(description: "Store config Details Tax")
    customer : SimiStoreConfigDetailsCustomer @doc(description: "Store config Details Customer")
    catalog : SimiStoreConfigDetailsCatalog @doc(description: "Store config DetailsCatalog")
    checkout_terms_and_conditions : SimiStoreConfigDetailsCheckoutTerms  @doc(description: "Store config CheckoutTerms")
    pwacontactus : SimiStoreConfigDetailsPWAContactUs  @doc(description: "Store config PWA Contactus")
    instant_contact : SimiStoreConfigDetailsInstantContact  @doc(description: "Store config Instant Contact")
	rating_form: [SimiStoreConfigRatingForm] @doc(description: "Store config from rating criterias")
    analytics: SimiStoreConfigAnalytics @doc(description: "Store config Analytics")
}

type SimiStoreConfigDetailsBase {
    country_code : String
    country_name : String
    magento_version : String
    locale_identifier : String
    store_id : String
    store_name : String
    store_code : String
    group_id : String
    base_url : String
    use_store : String
    is_rtl : String
    is_show_sample_data : String
    currency_symbol : String
    currency_code : String
    currency_position : String
    thousand_separator : String
    decimal_separator : String
    min_number_of_decimals : String
    max_number_of_decimals : String
    currencies : [SimiStoreConfigDetailsCurrency] @doc(description: "Currency options")
    is_show_home_title: String
    is_show_in_row_price : String
    is_show_price_for_guest : String
    open_url_in_app : String
    connector_version : String
    is_support_put : String
    is_support_delete : String
    default_title : String
    default_description : String
    title_prefix : String
    title_suffix : String
    default_keywords : String
    time_offset: String
}

type SimiStoreConfigDetailsSales {
    sales_reorder_allow : String
    sales_totals_sort_subtotal : String
    sales_totals_sort_discount : String
    sales_totals_sort_shipping : String
    sales_totals_sort_weee : String
    sales_totals_sort_tax : String
    sales_totals_sort_grand_total : String
    sales_minimum_order_active: String
    sales_minimum_order_amount: String
    sales_minimum_order_description: String
    sales_minimum_order_error_message: String
}

type SimiStoreConfigDetailsCheckout {
    enable_guest_checkout : String
    enable_agreements : String
    checkout_webview : SimiCheckoutWebview
}

type SimiStoreConfigDetailsTax {
    tax_display_type : String
    tax_display_shipping : String
    tax_cart_display_price : String
    tax_cart_display_subtotal : String
    tax_cart_display_shipping : String
    tax_cart_display_grandtotal : String
    tax_cart_display_full_summary : String
    tax_cart_display_zero_tax : String
    tax_sales_display_price : String
    tax_sales_display_subtotal : String
    tax_sales_display_shipping : String
    tax_sales_display_grandtotal : String
    tax_sales_display_full_summary : String
    tax_sales_display_zero_tax : String
}

type SimiStoreConfigDetailsCustomer {
    address_option : SimiCustomerAddressOption
    account_option : SimiAccountOption
    password_validation : SimiPasswordValidation
    address_fields_config : SimiCIMConfig
}

type SimiStoreConfigDetailsCatalog {
    seo : SimiSEOConfig
    frontend : SimiCatalogFrontendConfig
    cataloginventory : SimiCatalogInventoryConfig
    review : SimiCatalogReviewConfig
}

type SimiStoreConfigDetailsCurrency {
    value: String
    title: String
	symbol: String
}

type SimiStoreConfigDetailsCheckoutTerms {
    title : String
    content : String
}

type SimiStoreConfigDetailsPWAContactUs {
    listEmail : [ SimiContactEmail ]
    listHotline : [ SimiContactHotLine ]
    listSms : [ SimiContactSMS ]
    listWebsite : [ SimiContactWebsite ]
}

type SimiStoreConfigDetailsInstantContact {
    email : [ String ]
    phone : [ String ]
    message : [ String ]
    website : String
    style : String
    activecolor : String
}

type SimiStoreConfigAnalytics {
    google_analytics_active: String
    google_analytics_account: String
}

type SimiStoreConfigRatingForm {
	rate_code: String!
	rate_options: [ SimiRatingOptions ]! @doc(description: "Retrieves metadata of rating options")
}

type SimiRatingOptions {
	key: String!
	value: String!
}

type SimiCheckoutWebview {
    enable : String
    checkout_url : String
    success_url : String
    fail_url : String
}

type SimiCustomerAddressOption {
    street_lines : String
    prefix_show : String
    middlename_show : String
    suffix_show : String
    dob_show : String
    taxvat_show : String
    gender_show : String
    gender_value : [ SimiGenderValue ]
}

type SimiGenderValue {
    label : String
    value : String
}

type SimiAccountOption {
    taxvat_show : String
}

type SimiPasswordValidation {
    minimum_password_length : String
    required_character_classes_number : String
}

type SimiCIMConfig {
    enable : String
    company_show : String
    street_show : String
    country_id_show : String
    region_id_show : String
    city_show : String
    zipcode_show : String
    telephone_show : String
    fax_show : String
    prefix_show : String
    suffix_show : String
    dob_show : String
    gender_show : String
    taxvat_show : String
    street_default : String
    country_id_default : String
    region_id_default : String
    city_default : String
    zipcode_default : String
    telephone_default : String
}

type SimiSEOConfig {
    product_url_suffix : String
    category_url_suffix : String
    product_use_categories_inherit : String
}

type SimiCatalogFrontendConfig {
    view_products_default : String
    is_show_zero_price : String
    is_show_link_all_product : String
    catalog_frontend_list_mode : String
    catalog_frontend_grid_per_page_values : String
    catalog_frontend_list_per_page : String
    catalog_frontend_list_allow_all : String
    catalog_frontend_default_sort_by : String
    catalog_frontend_flat_catalog_category : String
    catalog_frontend_flat_catalog_product : String
    catalog_frontend_parse_url_directives : String
    show_discount_label_in_product : String
    show_size_in_compare : String
    footer_title1 : String
    footer_title2 : String
    footer_link : String
}

type SimiCatalogInventoryConfig {
    cataloginventory_item_options_manage_stock : String
    cataloginventory_item_options_backorders : String
    cataloginventory_item_options_max_sale_qty : String
    cataloginventory_item_options_min_qty : String
    cataloginventory_item_options_min_sale_qty : String
    cataloginventory_item_options_notify_stock_qty : String
    cataloginventory_item_options_enable_qty_increments : String
    cataloginventory_item_options_qty_increments : String
    cataloginventory_item_options_auto_return : String
}

type SimiCatalogReviewConfig {
    catalog_review_active : String
    catalog_review_allow_guest : String
}

type SimiContactEmail {
    contact_email : String
}

type SimiContactHotLine {
    contact_hotline : String
}

type SimiContactSMS {
    contact_sms : String
}

type SimiContactWebsite {
    contact_website : String
}


type SimiBanner @doc(description: "data of the banner"){
    banner_id: Int @doc(description: "the id of this banner")
    banner_name: String @doc(description: "the name of the banner")
    banner_url: String @doc(description: "the url of the banner")
    banner_name_tablet: String @doc(description: "the name link of the banner in table form")
    banner_title: String @doc(description: "the title of the banner")
    status: String @doc(description: "the status of the banner")
    website_id: Int @doc(description: "the website id this banner contain")
    type: Int @doc(description: "the type of this banner")
    category_id: Int @doc(description: "the product id of this banner")
    product_id: Int @doc(description: "the product id of this banner")
    sort_order: Int @doc(description: "the short order of the banner")
    entity_id: Int @doc(description: "the entity id this banner has")
    content_type: Int @doc(description: "the content type this banner is")
    item_id: Int @doc(description: "the item id of this banner")
    store_view_id: Int @doc(description: "the store view this banner has")
    width: Int @doc(description: "the width measure of this banner")
    height: Int @doc(description: "the height measure of this banner")
    width_tablet: Int @doc(description: "the width measure of this banner in tablet enviroment")
    height_tablet: Int @doc(description: "the height measure of this banner in tablet enviroment")
    has_children: Boolean @doc(description: "if the banner has children or not")
    cat_name: String @doc(description: "cat name of the banner")
    url_path: String @doc(description: "url path of the categories if the type of the banner is 2, category in app")
    url_key: String @doc(description: "url key of the banner if it's type is 1, product-in-app")
    total_banner: Int @doc(description: "how much banner it returns")

}

type SimiCMSpage @doc(description: "return the Cms page data"){
    cms_id: Int @doc(description: "the cms id ")
    cms_image: String @doc(description: "the link of the image of this cms")
    cms_title: String @doc(description: "the title of the cms page")
    cms_content: String @doc(description: "the content of the cms page")
    cms_status: Int @doc(description: "the status of the cms page")
    website_id: Int @doc(description: "the website ID which this cmspage contain")
    type: Int @doc(description: "the type of the cms page")
    category_id: Int @doc(description: "the category id which this cms page has")
    sort_order: Int @doc(description: "the sort order of the cms page")
    cms_script: String @doc(description: "the script of the cms page")
    cms_url: String @doc(description: "the url of the PWA cms page")
    cms_meta_title: String @doc(description: "the meta title of the cms PWA page")
    cms_meta_desc: String @doc(description: "the meta cms desc")
    entity_id: Int @doc(description: "the entity id of this cms")
    content_type: Int @doc(description: "the content type of this cms")
    item_id: Int @doc(description: "the item id of this cms")
    store_view_id: Int @doc(description: "the store view id this cms allow to shown up")
}

type SimiCategory @doc(description: "data of the simi category"){
    simicategory_id: Int @doc(description: "the id of the simicategories")
    simicategory_name: String @doc(description: "simicategory name")
    simicategory_filename: String @doc(description: "the url of the image file")
    simicategory_filename_tablet: String @doc(description: "the url of the tablet image file")
    category_id: Int @doc(description: "the category id ")
    status: Int @doc(description: "the status of this simi category")
    website_id: Int @doc(description: "the id of the website this category have an effect on")
    storeview_id: Int @doc(description: "the storeview_id this category have an effect on")
    sort_order: Int @doc(description: "the sort order of this category")
    matrix_width_percent: String @doc(description: "the matrrix width percentage")
    matrix_height_percent: String @doc(description: "The height percentage of the picture")
    matrix_width_percent_tablet: String @doc(description: "the width percentage of the picture in the tablet form")
    matrix_height_percent_tablet: String @doc(description: "the height percentage of the picture in the tablet form")
    matrix_row: Int @doc(description: "row number")
    content_type: String @doc(description: "the content type of the category")
    store_view_id: String @doc(description: "the store view id this categories contain")
    width: Int @doc(description: "the width measure of this category")
    height: Int @doc(description: "the height measure of this category")
    width_tablet: Int @doc(description: "the width measure of this category in tablet enviroment")
    height_tablet: Int @doc(description: "the height measure of this category in tablet enviroment")
    has_children: Boolean @doc(description: "if the category has children or not")
    cat_name: String @doc(description: "cat name of the category")
    url_path: String @doc(description: "url path of the categories if the type of the category is 2, category in app")
    total_category: Int @doc(description: "how much category it returns")
}

type SimiProductList @doc(description: "the type which return the ProductList information"){
    productlist_id: Int @doc(description: "the id of this productlist")
    list_title: String @doc(description: "the title name of the product list")
    list_image: String @doc(description: "the url of the image of the product list")
    list_image_tablet: String @doc(description: "the url of the image of the product list but displayed in tablets")
    list_type: Int @doc(description: "the type of this product list")
    list_products: String @doc(description: "the product of this list_product")
    list_status: Int @doc(description: "the status of this product list")
    sort_order: Int @doc(description: "the sort order of this product list compared to each other")
    matrix_width_percent: String @doc(description: "the matrrix width percentage")
    matrix_height_percent: String @doc(description: "The height percentage of the picture")
    matrix_width_percent_tablet: String @doc(description: "the width percentage of the picture in the tablet form")
    matrix_height_percent_tablet: String @doc(description: "the height percentage of the picture in the tablet form")
    matrix_row: Int @doc(description: "row number")
    category_id: Int @doc(description: "the category id that this product list hold")
    entity_id: Int @doc(description: "the entity id this product list page contain")
    content_type: Int @doc(description: "the content type this product list page is")
    item_id: Int @doc(description: "the item id this product list has")
    store_view_id: Int @doc(description: "the store viewe id this product list allow to shown up")
    width: Int @doc(description: "original width size of the image")
    height: Int @doc(description: "original height size of the imagee")
    width_tablet: Int @doc(description: "original width size of the image on tablet form")
    height_tablet: Int @doc(description: "original height size of the image on tablet form")
    type_name: String @doc(description: "the type name of this product list")
}

type CustomerOrder {
    prices: OrderTotal @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\CustomerOrder\\TotalsResolver") @doc(description: "Total segment of the order totals.")
    items: [OrderItem] @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\CustomerOrder\\ItemsResolver") @doc(description: "Customer order items.")
    billing_address: CustomerAddress @doc(description: "Customer order address.")
    shipping_address: CustomerAddress @doc(description: "Customer order address.")
    shipping_method: String @doc(description: "Customer order shipping method.")
    payment_method: String @doc(description: "Customer order payment method title.")
    is_virtual: Boolean @doc(description: "Customer order is virtual.")
}

type OrderItem @doc(description: "Customer order item.") {
    id: Int
    name: String
    url_key: String
    image: String
    sku: String
    price: Float
    qty: Int
    discount: Float
    row_total: Float
}

type OrderTotal {
    sub_total: Money
    grand_total: Money
    tax: Money
    discount: Money
    discounts: [Discount] @doc(description:"An array of applied discounts") @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\CustomerOrder\\DiscountResolver")
}

type WishlistCart {
    wishlist: Wishlist
    cart: Cart
}

type SimiCustomerOrder @doc(description: "Order mapping fields") {
	id: Int
	increment_id: String @deprecated(reason: "Use the order_number instead.")
	order_number: String! @doc(description: "The order number")
	created_at: String
	grand_total: Float
	status: String
	order_currency: String
}

type CustomerOrders {
	items: [SimiCustomerOrder] @doc(description: "Array of orders")
}

input ContactusInput {
	name: String @doc(description: "The customer's full name")
	email: String @doc(description: "The customer's email address")
	phone: String @doc(description: "The customer's Telephone")
	message: String @doc(description: "The customer's message")
	company: String @doc(description: "The customer's company")
}

type ContactusOutput {
	success_message: String @doc(description: "Success Message")
}

interface CartItemInterface {
    simi_cart_item_data: SimiCartItemData @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Cart\\Cartitemstock")
}

type SimiCartItemData {
    stock_status: Boolean
    stock_error_message: String
    child_product_sku: String
}

type SimiUserIsAuthed {
    token_valid: Boolean
    cart_editable: Boolean
}


type Cart {
    simi_totals: [SimiTotals] @resolver(class: "Simi\\SimiconnectorGraphQl\\Model\\Resolver\\Cart\\SimiTotals")
}

type SimiTotals {
    code: String
    value: Float
    currency: String
}